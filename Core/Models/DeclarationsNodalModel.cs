using code_in.Presenters.Nodal;
using ICSharpCode.NRefactory.CSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace code_in.Models.NodalModel
{
    public class DeclarationsNodalModel : INodalModel
    {
        public bool IsSaved
        {
            get;
            set;
        }
        public DeclarationsNodalPresenterLocal Presenter;
        public SyntaxTree AST
        {
            get;
            private set;
        }
        public string FilePath
        {
            get;
            private set;
        }
        public string FileName
        {
            get
            {
                return Path.GetFileName(FilePath);
            }
        }

        public DeclarationsNodalModel(string filePath)
        {
            IsSaved = true;
            FilePath = filePath;
            try
            {
                AST = _parseFile(FilePath);
            }
            catch (Exception e)
            {
                // TODO
                //Presenter.Close();
                MessageBox.Show(e.ToString());
            }
        }

        private SyntaxTree _parseFile(string filePath)
        {
            var parser = new ICSharpCode.NRefactory.CSharp.CSharpParser();
            StreamReader fileStream = new StreamReader(filePath);
            SyntaxTree ast = parser.Parse(fileStream);
            fileStream.Close();
            return ast;
        }

        public void Save()
        {
            this.Save(this.FilePath);
            
        }

        public void Save(string filePath)
        {
            String finalFilePath = Path.GetFileNameWithoutExtension(filePath) + ".cdn.cs"; // Temporary to avoid bugs while developing
            using (System.IO.StreamWriter sw = new System.IO.StreamWriter(Path.GetFileNameWithoutExtension(finalFilePath)))
            {
                String code = "// Generated by Visual Studio's Code_in.";
                sw.AutoFlush = true;
                sw.WriteLine(code);
                sw.Write(AST.ToString());
                sw.Close();
            }
        }
    }
}
